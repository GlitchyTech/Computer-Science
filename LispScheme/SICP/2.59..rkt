#lang racket

(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))

(define (union-set1 set1 set2)
  (define (iter set1 set2 union)
    (cond ((null? set1) (append union set2))
          ((null? set2) (append union set1))
          ((and (not (element-of-set? (car set1) union))
                (not (element-of-set? (car set1) set2)))
           (iter (cdr set1) set2 (cons (car set1) union)))
          (else (iter (cdr set1) set2 union))))
  (iter set1 set2 '()))

(define (union-set2 set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((not (element-of-set? (car set1)
                               (union-set2 (cdr set1) set2)))
         (cons (car set1)
               (union-set2 (cdr set1) set2)))
        (else (union-set2 (cdr set1) set2))))

(define (union-set3 set1 set2)
  (cond ((null? set1) set2)
        ((element-of-set? (car set1) set2)
         (union-set3 (cdr set1) set2))
        (else
         (cons (car set1)
               (union-set3 (cdr set1) set2)))))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))